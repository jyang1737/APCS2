Binary Trees
============

In a binary tree, each node, except the root has one parent. Each node contains references to its left and right children; a null value indicates that the corresponding child is not in the tree. A node that doesn't have any children is called a leaf. Each node is a root of a smaller binary tree.

Ex.  	    	  1
	      	 / \
	       	2   3
	       /   / \
	      4   5   6
	       	 / \	 
		7   8

1. How many nodes are in this tree?	8
2. What is the root node?		1
3. How many leaves are in this tree?	4
4. Which nodes are leaves?     		4,6,7,8
5. What is the parent node of 5?	3
6. What are the children of node 2?	4

Definition: The height of a tree is the length of the longest path from root to leaf. (The number of links from root to leaf)

7. What is the height of the tree? 3

Trees are almost always handled recursively.
====================================================

TreeTraversals:
===============
A traversal is when each node of a tree is visited.

There are 3 common types of tree traversals: inorder, preorder, postorder.

An inorder traversal recursively follows these 3 steps:
   1. go left if possible
   2. process the node
   3. go right if possible
root is in the middle   

8. What is the inorder traversal of the tree in the above example if the process is to print the node value?

inorder: 2,4,1,7,5,8,3,6

A preorder traversal recursively follows these 3 steps:
  1. process the node
  2. go left if possible
  3. go right if possible
root is the first

9. What is the preorder traversal of the tree?

preorder: 1,2,4,3,5,7,8,6

A postorder traversal recursively follows these 3 steps:
  1. go left if possible
  2. go right if possible
  3. process the node
root is the last

postorder: 4,2,7,8,5,6,3,1

==================================
inorder: 3,10,8,4,9,7,11
preorder: 4,8,3,10,7,9,11
postorder: 10,3,8,9,11,7,4

	   
	     4
          /	\
	 8	 7
	/ 	/ \
       3       9   11
        \	   
	 10

=================================
Balanced Tree
=================================
A balanced tree is a tree with the minimum possible maximum height.

=============
Binary Search Tree
=============

A binary search tree (BST) is a binary tree with and ordering property.

We will use this ordering property.

   Given a root, the items contained in the left subtree are less than the root, the items in the right subtree are greater or equal to the root.

The benefit of a BST is that if the tree is balanced then the following operations should be O(log N), where N is the number of elements in tree.

    - find(x)
    - insert(x)
    - remove(x)

Insert algorithm for a BST
==========================
Given a value x start at the root and insert x as a leaf following these steps:
      if the tree is empty then x is the root
      else if x is less than the current root and the left subtree is empty
      	   insert x as the root of the left subtree.
      else if x is greater than the current root and the right subtree is empty
      	   insert x as the root of the right subtree.
      else if x is less than the current root go left
      else go right

1. Draw the following bst by inserting this sequence of numbers:
   	4,8,12,5,14,21,2,1

		4
	      /   \
	     2     8
 	    /	  / \
	   1	 5   12
		       \
		   	14	    
			  \
			   21	    
	

2. Is BST balanced? No
3. Rearrange the sequence to produce a balanced tree.
   5,4,2,1,8,12,14,21	     

Remove Algorithm for BST
========================

Steps
  1. If the tree is empty then stop.
  2. If the val is a leafe remove the leaf.
  3. If the val is an internal node with no right subtree,
     then transfer the maximum value, max, from the left subtree into
     the node that contains val, then remove max from left subtree.
  4. otherwise transfer the min value, min, from the right subtree into
     the node that contains val, then remove min from the right subtree.

Draw BST for 10, 24, 5, 4, 13, 11, 7, 12
     	 10  
       /    \
      5     24
     / \    /
    4  	7  13
       	  /  
      	 11
	 /
	12  
      	
     	  
preorder: 10, 5, 4, 7, 24, 13, 11, 12
postorder: 4, 7, 5, 12, 11, 13, 24, 10
inorder: 4, 5, 7, 10, 11, 12, 13, 24 

removing 13
     	 10  
       /    \
      5     24
     / \    /
    4  	7  12
       	  /  
      	 11  
      	
removing 5
     	 10  
       /    \
      7     24
     /      /
    4  	   13
       	  /  \
      	 11  12
      	
removing 10
     	 24  
       /    \
      5     13
     / \    /
    4  	7  12
       	  /  
      	 11  
      	
